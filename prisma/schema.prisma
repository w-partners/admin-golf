generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int         @id @default(autoincrement())
  name              String
  phone             String      @unique
  password          String
  accountType       AccountType
  company           String?
  region            Region?
  status            UserStatus  @default(ACTIVE)
  teamId            Int?
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  lastLoginAt       DateTime?
  notes             String?
  managedTeam       Team?       @relation("TeamLeader")
  confirmedTeeTimes TeeTime[]   @relation("ConfirmedBy")
  teeTimes          TeeTime[]   @relation("ManagerTeeTime")
  team              Team?       @relation(fields: [teamId], references: [id])

  @@map("users")
}

model Team {
  id       Int    @id @default(autoincrement())
  name     String
  leaderId Int    @unique
  leader   User   @relation("TeamLeader", fields: [leaderId], references: [id])
  members  User[]

  @@map("teams")
}

model GolfCourse {
  id             Int        @id @default(autoincrement())
  sequence       Int
  name           String
  region         Region
  address        String
  contact        String
  operStatus     OperStatus
  notes          String?
  defaultPlayers Int        @default(4)
  teeTimes       TeeTime[]

  @@map("golf_courses")
}

model TeeTime {
  id             Int            @id @default(autoincrement())
  sequence       Int
  golfCourseId   Int
  region         Region
  date           DateTime
  time           DateTime
  timeSlot       TimeSlot
  greenFee       Decimal
  players        Int
  bookingType    BookingType
  request        RequestType
  holes          HoleType
  caddy          CaddyType
  prepayment     Boolean
  meal           Boolean
  cartFee        Boolean
  status         TeeTimeStatus  @default(AVAILABLE)
  reservedAt     DateTime?
  confirmedAt    DateTime?
  connectedId    Int?
  lodging        String?
  type           TeeTimeType
  booker         String?
  managerId      Int?
  confirmedById  Int?
  performanceReg Boolean        @default(false)
  commission     Decimal?
  settlement     SettlementType
  apiIntegration Boolean        @default(false)
  notes          String?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  confirmedBy    User?          @relation("ConfirmedBy", fields: [confirmedById], references: [id])
  connected      TeeTime?       @relation("ConnectedTeeTime", fields: [connectedId], references: [id])
  connections    TeeTime[]      @relation("ConnectedTeeTime")
  golfCourse     GolfCourse     @relation(fields: [golfCourseId], references: [id])
  manager        User?          @relation("ManagerTeeTime", fields: [managerId], references: [id])

  @@map("tee_times")
}

model SystemConfig {
  id        Int      @id @default(autoincrement())
  category  String
  key       String
  value     Json
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([category, key])
  @@map("system_config")
}

model Notice {
  id                 Int           @id @default(autoincrement())
  title              String
  content            String
  isActive           Boolean       @default(true)
  targetAccountTypes AccountType[]
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt

  @@map("notices")
}

enum AccountType {
  SUPER_ADMIN
  ADMIN
  TEAM_LEADER
  INTERNAL_MANAGER
  EXTERNAL_MANAGER
  PARTNER
  GOLF_COURSE
  MEMBER
}

enum Region {
  GYEONGGI_NORTH
  GYEONGGI_SOUTH
  GYEONGGI_EAST
  GANGWON
  GYEONGSANG
  CHUNGNAM
  JEOLLA
  JEJU
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum OperStatus {
  API_CONNECTED
  MANUAL
  STANDBY
}

enum TimeSlot {
  SLOT_1
  SLOT_2
  SLOT_3
}

enum BookingType {
  BOOKING
  JOIN
}

enum RequestType {
  ANY
  COUPLE
  MALE
  FEMALE
}

enum HoleType {
  HOLE_18
  HOLE_36
  HOLE_9
}

enum CaddyType {
  CADDY
  NO_CADDY
  DRIVING_CADDY
  TRAINEE_CADDY
}

enum TeeTimeStatus {
  AVAILABLE
  RESERVED
  CONFIRMED
  COMPLETED
  CANCELLED
}

enum TeeTimeType {
  DAILY
  PACKAGE
}

enum SettlementType {
  PREPAYMENT
  POST_SETTLEMENT
}
