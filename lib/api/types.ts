/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/auth/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** 연락처 기반 로그인 */
        post: operations["login"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/logout": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** 로그아웃 */
        post: operations["logout"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/session": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 현재 세션 정보 조회 */
        get: operations["getSession"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tee-times": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 티타임 목록 조회 */
        get: operations["getTeeTimesList"];
        put?: never;
        /** 티타임 등록 */
        post: operations["createTeeTime"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tee-times/matrix": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 매트릭스 뷰 데이터 조회 */
        get: operations["getTeeTimesMatrix"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tee-times/reserve": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** 티타임 예약 (10분 타이머 시작) */
        post: operations["reserveTeeTime"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tee-times/confirm": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** 티타임 예약 확정 */
        post: operations["confirmTeeTime"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tee-times/cancel": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** 티타임 예약 취소 */
        post: operations["cancelTeeTime"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tee-times/timer-status/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 예약 타이머 상태 조회 */
        get: operations["getTimerStatus"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tee-times/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 티타임 상세 조회 */
        get: operations["getTeeTimeById"];
        /** 티타임 수정 */
        put: operations["updateTeeTime"];
        post?: never;
        /** 티타임 삭제 */
        delete: operations["deleteTeeTime"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/performance/complete": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** 티타임 완료 등록 */
        post: operations["completePerformance"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/performance/summary": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 실적 요약 조회 */
        get: operations["getPerformanceSummary"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/performance/stats": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 실적 통계 조회 */
        get: operations["getPerformanceStats"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/golf-courses": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 골프장 목록 조회 */
        get: operations["getGolfCoursesList"];
        put?: never;
        /** 골프장 등록 */
        post: operations["createGolfCourse"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/golf-courses/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 골프장 상세 조회 */
        get: operations["getGolfCourseById"];
        /** 골프장 수정 */
        put: operations["updateGolfCourse"];
        post?: never;
        /** 골프장 삭제 */
        delete: operations["deleteGolfCourse"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 회원 목록 조회 */
        get: operations["getUsersList"];
        put?: never;
        /** 회원 등록 */
        post: operations["createUser"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 회원 상세 조회 */
        get: operations["getUserById"];
        /** 회원 수정 */
        put: operations["updateUser"];
        post?: never;
        /** 회원 삭제 */
        delete: operations["deleteUser"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/teams": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 팀 목록 조회 */
        get: operations["getTeamsList"];
        put?: never;
        /** 팀 생성 */
        post: operations["createTeam"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/teams/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 팀 상세 조회 */
        get: operations["getTeamById"];
        /** 팀 수정 */
        put: operations["updateTeam"];
        post?: never;
        /** 팀 삭제 */
        delete: operations["deleteTeam"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** @enum {string} */
        AccountType: "SUPER_ADMIN" | "ADMIN" | "TEAM_LEADER" | "INTERNAL_MANAGER" | "EXTERNAL_MANAGER" | "PARTNER" | "GOLF_COURSE" | "MEMBER";
        /** @enum {string} */
        Region: "제주" | "경기" | "강원" | "충청" | "호남" | "영남" | "경상" | "기타";
        /** @enum {string} */
        TeeTimeStatus: "AVAILABLE" | "RESERVED" | "CONFIRMED" | "COMPLETED" | "CANCELLED";
        /** @enum {string} */
        TeeTimeType: "DAILY" | "PACKAGE";
        /** @enum {string} */
        BookingType: "BOOKING" | "JOIN";
        /** @enum {string} */
        TimeSlot: "1부" | "2부" | "3부";
        /** @enum {string} */
        GolfCourseStatus: "ACTIVE" | "API_INTEGRATION" | "MANUAL" | "INACTIVE";
        ErrorResponse: {
            /** @description 에러 코드 */
            code: string;
            /** @description 에러 메시지 */
            message: string;
            /** @description 추가 에러 상세 정보 */
            details?: Record<string, never>;
        };
        ValidationError: {
            /** @enum {string} */
            code: "VALIDATION_ERROR";
            message: string;
            errors: {
                field?: string;
                message?: string;
                code?: string;
            }[];
        };
        SuccessResponse: {
            /** @default true */
            success: boolean;
            message?: string;
        };
        LoginRequest: {
            /** @description 연락처 (010으로 시작하는 11자리) */
            phoneNumber: string;
            /** @description 비밀번호 */
            password: string;
        };
        LoginResponse: {
            /** @description JWT 액세스 토큰 */
            accessToken?: string;
            /** @description JWT 리프레시 토큰 */
            refreshToken?: string;
            user?: components["schemas"]["User"];
        };
        SessionResponse: {
            user?: components["schemas"]["User"];
            /** Format: date-time */
            expires?: string;
        };
        User: {
            id?: string;
            phoneNumber?: string;
            name?: string;
            accountType?: components["schemas"]["AccountType"];
            teamId?: string | null;
            team?: components["schemas"]["Team"];
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
        };
        CreateUserRequest: {
            phoneNumber: string;
            password: string;
            name: string;
            accountType: components["schemas"]["AccountType"];
            teamId?: string;
        };
        UpdateUserRequest: {
            name?: string;
            password?: string;
            accountType?: components["schemas"]["AccountType"];
            teamId?: string;
        };
        UserListResponse: {
            data?: components["schemas"]["User"][];
            pagination?: components["schemas"]["Pagination"];
        };
        Team: {
            id?: string;
            name?: string;
            leaderId?: string;
            leader?: components["schemas"]["User"];
            members?: components["schemas"]["User"][];
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
        };
        CreateTeamRequest: {
            name: string;
            leaderId: string;
        };
        UpdateTeamRequest: {
            name?: string;
            leaderId?: string;
        };
        TeamListResponse: {
            data?: components["schemas"]["Team"][];
            pagination?: components["schemas"]["Pagination"];
        };
        GolfCourse: {
            id?: string;
            order?: number;
            region?: components["schemas"]["Region"];
            name?: string;
            address?: string;
            phoneNumber?: string;
            status?: components["schemas"]["GolfCourseStatus"];
            notes?: string | null;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
        };
        CreateGolfCourseRequest: {
            order?: number;
            region: components["schemas"]["Region"];
            name: string;
            address: string;
            phoneNumber: string;
            /** @default ACTIVE */
            status: components["schemas"]["GolfCourseStatus"];
            notes?: string;
        };
        UpdateGolfCourseRequest: {
            order?: number;
            region?: components["schemas"]["Region"];
            name?: string;
            address?: string;
            phoneNumber?: string;
            status?: components["schemas"]["GolfCourseStatus"];
            notes?: string;
        };
        GolfCourseListResponse: {
            data?: components["schemas"]["GolfCourse"][];
            pagination?: components["schemas"]["Pagination"];
        };
        TeeTime: {
            id?: string;
            golfCourseId?: string;
            golfCourse?: components["schemas"]["GolfCourse"];
            /** Format: date */
            date?: string;
            time?: string;
            timeSlot?: components["schemas"]["TimeSlot"];
            /**
             * Format: decimal
             * @description 그린피 (만원 단위, 소수점 1자리)
             */
            greenFee?: number;
            playerCount?: number;
            requirements?: string;
            /** @enum {string} */
            holeType?: "18홀" | "9홀";
            caddie?: boolean;
            /**
             * Format: decimal
             * @description 선입금
             */
            advance?: number;
            mealIncluded?: boolean;
            cartIncluded?: boolean;
            teeTimeType?: components["schemas"]["TeeTimeType"];
            bookingType?: components["schemas"]["BookingType"];
            status?: components["schemas"]["TeeTimeStatus"];
            /** Format: date-time */
            reservedAt?: string | null;
            managerId?: string | null;
            manager?: components["schemas"]["User"];
            /** Format: date-time */
            confirmedAt?: string | null;
            confirmedBy?: string | null;
            /** @description 연결된 티타임 ID (패키지용) */
            connectedTeeTimeId?: string | null;
            /** @description 숙박 정보 (패키지용) */
            accommodationInfo?: string | null;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
        };
        CreateTeeTimeRequest: {
            golfCourseId: string;
            /** Format: date */
            date: string;
            time: string;
            /** Format: decimal */
            greenFee: number;
            playerCount: number;
            requirements: string;
            /** @enum {string} */
            holeType: "18홀" | "9홀";
            caddie: boolean;
            /** Format: decimal */
            advance: number;
            mealIncluded: boolean;
            cartIncluded: boolean;
            /** @default DAILY */
            teeTimeType: components["schemas"]["TeeTimeType"];
            connectedTeeTimeId?: string;
            accommodationInfo?: string;
        };
        UpdateTeeTimeRequest: {
            /** Format: date */
            date?: string;
            time?: string;
            /** Format: decimal */
            greenFee?: number;
            playerCount?: number;
            requirements?: string;
            /** @enum {string} */
            holeType?: "18홀" | "9홀";
            caddie?: boolean;
            /** Format: decimal */
            advance?: number;
            mealIncluded?: boolean;
            cartIncluded?: boolean;
            connectedTeeTimeId?: string;
            accommodationInfo?: string;
        };
        TeeTimeListResponse: {
            data?: components["schemas"]["TeeTime"][];
            pagination?: components["schemas"]["Pagination"];
        };
        ReserveTeeTimeRequest: {
            teeTimeId: string;
        };
        ReserveTeeTimeResponse: {
            teeTime?: components["schemas"]["TeeTime"];
            /**
             * Format: date-time
             * @description 예약 만료 시간 (10분 후)
             */
            expiresAt?: string;
        };
        ConfirmTeeTimeRequest: {
            teeTimeId: string;
            /** @description 확정 메모 */
            notes?: string;
        };
        CancelTeeTimeRequest: {
            teeTimeId: string;
            /** @description 취소 사유 */
            reason?: string;
        };
        TimerStatusResponse: {
            teeTimeId?: string;
            status?: components["schemas"]["TeeTimeStatus"];
            /** Format: date-time */
            reservedAt?: string;
            /** Format: date-time */
            expiresAt?: string;
            /** @description 남은 시간 (초) */
            remainingSeconds?: number;
            isExpired?: boolean;
        };
        MatrixViewResponse: {
            matrixData?: components["schemas"]["RegionMatrix"][];
            dateColumns?: components["schemas"]["DateColumn"][];
            summary?: components["schemas"]["MatrixSummary"];
        };
        RegionMatrix: {
            region?: components["schemas"]["Region"];
            golfCourses?: components["schemas"]["GolfCourseMatrix"][];
        };
        GolfCourseMatrix: {
            id?: string;
            name?: string;
            dates?: components["schemas"]["DateMatrix"][];
        };
        DateMatrix: {
            /** Format: date */
            date?: string;
            /** @description 1부 티타임 수 */
            timeSlot1?: number;
            /** @description 2부 티타임 수 */
            timeSlot2?: number;
            /** @description 3부 티타임 수 */
            timeSlot3?: number;
            /** @description 전체 티타임 수 */
            total?: number;
        };
        DateColumn: {
            /** Format: date */
            date?: string;
            /** @description 표시용 날짜 (MM/DD) */
            displayDate?: string;
            /** @description 요일 */
            dayOfWeek?: string;
            isToday?: boolean;
            isWeekend?: boolean;
        };
        MatrixSummary: {
            totalGolfCourses?: number;
            totalTeeTimes?: number;
            teeTimeType?: components["schemas"]["TeeTimeType"];
            bookingType?: components["schemas"]["BookingType"];
            dateRange?: {
                /** Format: date */
                start?: string;
                /** Format: date */
                end?: string;
            };
        };
        Performance: {
            id?: string;
            teeTimeId?: string;
            teeTime?: components["schemas"]["TeeTime"];
            /** Format: date-time */
            completedAt?: string;
            actualPlayerCount?: number;
            /** Format: decimal */
            actualGreenFee?: number;
            /** Format: decimal */
            revenue?: number;
            notes?: string;
            registeredBy?: string;
            registeredByUser?: components["schemas"]["User"];
            /** Format: date-time */
            createdAt?: string;
        };
        CompletePerformanceRequest: {
            teeTimeId: string;
            actualPlayerCount: number;
            /** Format: decimal */
            actualGreenFee: number;
            notes?: string;
        };
        PerformanceSummaryResponse: {
            /** Format: decimal */
            totalRevenue?: number;
            totalCount?: number;
            /** Format: decimal */
            averageGreenFee?: number;
            performances?: components["schemas"]["Performance"][];
        };
        PerformanceStatsResponse: {
            period?: string;
            stats?: {
                label?: string;
                /** Format: decimal */
                revenue?: number;
                count?: number;
                /** Format: decimal */
                averageGreenFee?: number;
            }[];
        };
        Pagination: {
            page?: number;
            limit?: number;
            total?: number;
            totalPages?: number;
        };
    };
    responses: {
        /** @description 잘못된 요청 */
        BadRequestError: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["ValidationError"];
            };
        };
        /** @description 인증 실패 */
        UnauthorizedError: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                /** @example {
                 *       "code": "UNAUTHORIZED",
                 *       "message": "인증이 필요합니다"
                 *     } */
                "application/json": components["schemas"]["ErrorResponse"];
            };
        };
        /** @description 권한 부족 */
        ForbiddenError: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                /** @example {
                 *       "code": "FORBIDDEN",
                 *       "message": "해당 작업을 수행할 권한이 없습니다"
                 *     } */
                "application/json": components["schemas"]["ErrorResponse"];
            };
        };
        /** @description 리소스를 찾을 수 없음 */
        NotFoundError: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                /** @example {
                 *       "code": "NOT_FOUND",
                 *       "message": "요청한 리소스를 찾을 수 없습니다"
                 *     } */
                "application/json": components["schemas"]["ErrorResponse"];
            };
        };
        /** @description 충돌 발생 */
        ConflictError: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                /** @example {
                 *       "code": "CONFLICT",
                 *       "message": "리소스 충돌이 발생했습니다"
                 *     } */
                "application/json": components["schemas"]["ErrorResponse"];
            };
        };
        /** @description 서버 내부 오류 */
        InternalServerError: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                /** @example {
                 *       "code": "INTERNAL_SERVER_ERROR",
                 *       "message": "서버 내부 오류가 발생했습니다"
                 *     } */
                "application/json": components["schemas"]["ErrorResponse"];
            };
        };
    };
    parameters: {
        /** @description 페이지 번호 (1부터 시작) */
        PageParam: number;
        /** @description 페이지당 항목 수 */
        LimitParam: number;
        /** @description 정렬 기준 (field:asc 또는 field:desc) */
        SortParam: string;
    };
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    login: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LoginRequest"];
            };
        };
        responses: {
            /** @description 로그인 성공 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LoginResponse"];
                };
            };
            400: components["responses"]["BadRequestError"];
            401: components["responses"]["UnauthorizedError"];
        };
    };
    logout: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 로그아웃 성공 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SuccessResponse"];
                };
            };
        };
    };
    getSession: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 세션 정보 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SessionResponse"];
                };
            };
            401: components["responses"]["UnauthorizedError"];
        };
    };
    getTeeTimesList: {
        parameters: {
            query?: {
                /** @description 페이지 번호 (1부터 시작) */
                page?: components["parameters"]["PageParam"];
                /** @description 페이지당 항목 수 */
                limit?: components["parameters"]["LimitParam"];
                /** @description 정렬 기준 (field:asc 또는 field:desc) */
                sort?: components["parameters"]["SortParam"];
                golfCourseId?: string;
                date?: string;
                status?: components["schemas"]["TeeTimeStatus"];
                teeTimeType?: components["schemas"]["TeeTimeType"];
                bookingType?: components["schemas"]["BookingType"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 티타임 목록 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TeeTimeListResponse"];
                };
            };
            401: components["responses"]["UnauthorizedError"];
        };
    };
    createTeeTime: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateTeeTimeRequest"];
            };
        };
        responses: {
            /** @description 티타임 등록 성공 */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TeeTime"];
                };
            };
            400: components["responses"]["BadRequestError"];
            401: components["responses"]["UnauthorizedError"];
            403: components["responses"]["ForbiddenError"];
        };
    };
    getTeeTimesMatrix: {
        parameters: {
            query?: {
                type?: components["schemas"]["TeeTimeType"];
                booking?: components["schemas"]["BookingType"];
                startDate?: string;
                days?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 매트릭스 데이터 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MatrixViewResponse"];
                };
            };
            401: components["responses"]["UnauthorizedError"];
        };
    };
    reserveTeeTime: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ReserveTeeTimeRequest"];
            };
        };
        responses: {
            /** @description 예약 성공 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ReserveTeeTimeResponse"];
                };
            };
            400: components["responses"]["BadRequestError"];
            401: components["responses"]["UnauthorizedError"];
            403: components["responses"]["ForbiddenError"];
            404: components["responses"]["NotFoundError"];
            409: components["responses"]["ConflictError"];
        };
    };
    confirmTeeTime: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ConfirmTeeTimeRequest"];
            };
        };
        responses: {
            /** @description 확정 성공 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TeeTime"];
                };
            };
            400: components["responses"]["BadRequestError"];
            401: components["responses"]["UnauthorizedError"];
            403: components["responses"]["ForbiddenError"];
            404: components["responses"]["NotFoundError"];
            409: components["responses"]["ConflictError"];
        };
    };
    cancelTeeTime: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CancelTeeTimeRequest"];
            };
        };
        responses: {
            /** @description 취소 성공 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TeeTime"];
                };
            };
            400: components["responses"]["BadRequestError"];
            401: components["responses"]["UnauthorizedError"];
            403: components["responses"]["ForbiddenError"];
            404: components["responses"]["NotFoundError"];
        };
    };
    getTimerStatus: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 타이머 상태 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TimerStatusResponse"];
                };
            };
            401: components["responses"]["UnauthorizedError"];
            404: components["responses"]["NotFoundError"];
        };
    };
    getTeeTimeById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 티타임 상세 정보 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TeeTime"];
                };
            };
            401: components["responses"]["UnauthorizedError"];
            404: components["responses"]["NotFoundError"];
        };
    };
    updateTeeTime: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateTeeTimeRequest"];
            };
        };
        responses: {
            /** @description 수정 성공 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TeeTime"];
                };
            };
            400: components["responses"]["BadRequestError"];
            401: components["responses"]["UnauthorizedError"];
            403: components["responses"]["ForbiddenError"];
            404: components["responses"]["NotFoundError"];
        };
    };
    deleteTeeTime: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 삭제 성공 */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            401: components["responses"]["UnauthorizedError"];
            403: components["responses"]["ForbiddenError"];
            404: components["responses"]["NotFoundError"];
        };
    };
    completePerformance: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CompletePerformanceRequest"];
            };
        };
        responses: {
            /** @description 완료 등록 성공 */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Performance"];
                };
            };
            400: components["responses"]["BadRequestError"];
            401: components["responses"]["UnauthorizedError"];
            403: components["responses"]["ForbiddenError"];
            404: components["responses"]["NotFoundError"];
        };
    };
    getPerformanceSummary: {
        parameters: {
            query: {
                startDate: string;
                endDate: string;
                managerId?: string;
                teamId?: string;
                golfCourseId?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 실적 요약 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PerformanceSummaryResponse"];
                };
            };
            401: components["responses"]["UnauthorizedError"];
            403: components["responses"]["ForbiddenError"];
        };
    };
    getPerformanceStats: {
        parameters: {
            query: {
                period: "daily" | "weekly" | "monthly" | "yearly";
                startDate: string;
                endDate: string;
                groupBy?: "manager" | "team" | "golfCourse" | "region";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 실적 통계 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PerformanceStatsResponse"];
                };
            };
            401: components["responses"]["UnauthorizedError"];
            403: components["responses"]["ForbiddenError"];
        };
    };
    getGolfCoursesList: {
        parameters: {
            query?: {
                /** @description 페이지 번호 (1부터 시작) */
                page?: components["parameters"]["PageParam"];
                /** @description 페이지당 항목 수 */
                limit?: components["parameters"]["LimitParam"];
                /** @description 정렬 기준 (field:asc 또는 field:desc) */
                sort?: components["parameters"]["SortParam"];
                region?: components["schemas"]["Region"];
                status?: components["schemas"]["GolfCourseStatus"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 골프장 목록 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GolfCourseListResponse"];
                };
            };
            401: components["responses"]["UnauthorizedError"];
        };
    };
    createGolfCourse: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateGolfCourseRequest"];
            };
        };
        responses: {
            /** @description 골프장 등록 성공 */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GolfCourse"];
                };
            };
            400: components["responses"]["BadRequestError"];
            401: components["responses"]["UnauthorizedError"];
            403: components["responses"]["ForbiddenError"];
        };
    };
    getGolfCourseById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 골프장 상세 정보 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GolfCourse"];
                };
            };
            401: components["responses"]["UnauthorizedError"];
            404: components["responses"]["NotFoundError"];
        };
    };
    updateGolfCourse: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateGolfCourseRequest"];
            };
        };
        responses: {
            /** @description 수정 성공 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GolfCourse"];
                };
            };
            400: components["responses"]["BadRequestError"];
            401: components["responses"]["UnauthorizedError"];
            403: components["responses"]["ForbiddenError"];
            404: components["responses"]["NotFoundError"];
        };
    };
    deleteGolfCourse: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 삭제 성공 */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            401: components["responses"]["UnauthorizedError"];
            403: components["responses"]["ForbiddenError"];
            404: components["responses"]["NotFoundError"];
        };
    };
    getUsersList: {
        parameters: {
            query?: {
                /** @description 페이지 번호 (1부터 시작) */
                page?: components["parameters"]["PageParam"];
                /** @description 페이지당 항목 수 */
                limit?: components["parameters"]["LimitParam"];
                /** @description 정렬 기준 (field:asc 또는 field:desc) */
                sort?: components["parameters"]["SortParam"];
                accountType?: components["schemas"]["AccountType"];
                teamId?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 회원 목록 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserListResponse"];
                };
            };
            401: components["responses"]["UnauthorizedError"];
            403: components["responses"]["ForbiddenError"];
        };
    };
    createUser: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateUserRequest"];
            };
        };
        responses: {
            /** @description 회원 등록 성공 */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["User"];
                };
            };
            400: components["responses"]["BadRequestError"];
            401: components["responses"]["UnauthorizedError"];
            403: components["responses"]["ForbiddenError"];
            409: components["responses"]["ConflictError"];
        };
    };
    getUserById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 회원 상세 정보 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["User"];
                };
            };
            401: components["responses"]["UnauthorizedError"];
            403: components["responses"]["ForbiddenError"];
            404: components["responses"]["NotFoundError"];
        };
    };
    updateUser: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateUserRequest"];
            };
        };
        responses: {
            /** @description 수정 성공 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["User"];
                };
            };
            400: components["responses"]["BadRequestError"];
            401: components["responses"]["UnauthorizedError"];
            403: components["responses"]["ForbiddenError"];
            404: components["responses"]["NotFoundError"];
        };
    };
    deleteUser: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 삭제 성공 */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            401: components["responses"]["UnauthorizedError"];
            403: components["responses"]["ForbiddenError"];
            404: components["responses"]["NotFoundError"];
        };
    };
    getTeamsList: {
        parameters: {
            query?: {
                /** @description 페이지 번호 (1부터 시작) */
                page?: components["parameters"]["PageParam"];
                /** @description 페이지당 항목 수 */
                limit?: components["parameters"]["LimitParam"];
                /** @description 정렬 기준 (field:asc 또는 field:desc) */
                sort?: components["parameters"]["SortParam"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 팀 목록 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TeamListResponse"];
                };
            };
            401: components["responses"]["UnauthorizedError"];
            403: components["responses"]["ForbiddenError"];
        };
    };
    createTeam: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateTeamRequest"];
            };
        };
        responses: {
            /** @description 팀 생성 성공 */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Team"];
                };
            };
            400: components["responses"]["BadRequestError"];
            401: components["responses"]["UnauthorizedError"];
            403: components["responses"]["ForbiddenError"];
        };
    };
    getTeamById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 팀 상세 정보 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Team"];
                };
            };
            401: components["responses"]["UnauthorizedError"];
            403: components["responses"]["ForbiddenError"];
            404: components["responses"]["NotFoundError"];
        };
    };
    updateTeam: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateTeamRequest"];
            };
        };
        responses: {
            /** @description 수정 성공 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Team"];
                };
            };
            400: components["responses"]["BadRequestError"];
            401: components["responses"]["UnauthorizedError"];
            403: components["responses"]["ForbiddenError"];
            404: components["responses"]["NotFoundError"];
        };
    };
    deleteTeam: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 삭제 성공 */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            401: components["responses"]["UnauthorizedError"];
            403: components["responses"]["ForbiddenError"];
            404: components["responses"]["NotFoundError"];
        };
    };
}
