openapi: 3.0.3
info:
  title: Golf Course Reservation Management System API
  description: 골프장 예약 관리 시스템 API
  version: 1.0.0
  contact:
    name: API Support
    email: support@golfadmin.com

servers:
  - url: http://localhost:3000/api
    description: Development server
  - url: https://api.golfadmin.com
    description: Production server

security:
  - bearerAuth: []

tags:
  - name: Auth
    description: 인증 관련 API
  - name: Users
    description: 회원 관리 API
  - name: Teams
    description: 팀 관리 API
  - name: GolfCourses
    description: 골프장 관리 API
  - name: TeeTimes
    description: 티타임 관리 API
  - name: Performance
    description: 실적 관리 API

paths:
  # Auth Endpoints
  /auth/login:
    post:
      tags:
        - Auth
      summary: 연락처 기반 로그인
      operationId: login
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: 로그인 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '400':
          $ref: '#/components/responses/BadRequestError'

  /auth/logout:
    post:
      tags:
        - Auth
      summary: 로그아웃
      operationId: logout
      responses:
        '200':
          description: 로그아웃 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'

  /auth/session:
    get:
      tags:
        - Auth
      summary: 현재 세션 정보 조회
      operationId: getSession
      responses:
        '200':
          description: 세션 정보
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  # Tee Times Endpoints
  /tee-times:
    get:
      tags:
        - TeeTimes
      summary: 티타임 목록 조회
      operationId: getTeeTimesList
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/LimitParam'
        - $ref: '#/components/parameters/SortParam'
        - name: golfCourseId
          in: query
          schema:
            type: string
        - name: date
          in: query
          schema:
            type: string
            format: date
        - name: status
          in: query
          schema:
            $ref: '#/components/schemas/TeeTimeStatus'
        - name: teeTimeType
          in: query
          schema:
            $ref: '#/components/schemas/TeeTimeType'
        - name: bookingType
          in: query
          schema:
            $ref: '#/components/schemas/BookingType'
      responses:
        '200':
          description: 티타임 목록
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TeeTimeListResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

    post:
      tags:
        - TeeTimes
      summary: 티타임 등록
      operationId: createTeeTime
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTeeTimeRequest'
      responses:
        '201':
          description: 티타임 등록 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TeeTime'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'

  /tee-times/matrix:
    get:
      tags:
        - TeeTimes
      summary: 매트릭스 뷰 데이터 조회
      operationId: getTeeTimesMatrix
      parameters:
        - name: type
          in: query
          schema:
            $ref: '#/components/schemas/TeeTimeType'
          required: false
        - name: booking
          in: query
          schema:
            $ref: '#/components/schemas/BookingType'
          required: false
        - name: startDate
          in: query
          schema:
            type: string
            format: date
          required: false
        - name: days
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 90
            default: 90
      responses:
        '200':
          description: 매트릭스 데이터
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MatrixViewResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /tee-times/reserve:
    post:
      tags:
        - TeeTimes
      summary: 티타임 예약 (10분 타이머 시작)
      operationId: reserveTeeTime
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReserveTeeTimeRequest'
      responses:
        '200':
          description: 예약 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReserveTeeTimeResponse'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '409':
          $ref: '#/components/responses/ConflictError'

  /tee-times/confirm:
    post:
      tags:
        - TeeTimes
      summary: 티타임 예약 확정
      operationId: confirmTeeTime
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConfirmTeeTimeRequest'
      responses:
        '200':
          description: 확정 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TeeTime'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '409':
          $ref: '#/components/responses/ConflictError'

  /tee-times/cancel:
    post:
      tags:
        - TeeTimes
      summary: 티타임 예약 취소
      operationId: cancelTeeTime
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CancelTeeTimeRequest'
      responses:
        '200':
          description: 취소 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TeeTime'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'

  /tee-times/timer-status/{id}:
    get:
      tags:
        - TeeTimes
      summary: 예약 타이머 상태 조회
      operationId: getTimerStatus
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 타이머 상태
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TimerStatusResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'

  /tee-times/{id}:
    get:
      tags:
        - TeeTimes
      summary: 티타임 상세 조회
      operationId: getTeeTimeById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 티타임 상세 정보
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TeeTime'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'

    put:
      tags:
        - TeeTimes
      summary: 티타임 수정
      operationId: updateTeeTime
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateTeeTimeRequest'
      responses:
        '200':
          description: 수정 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TeeTime'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'

    delete:
      tags:
        - TeeTimes
      summary: 티타임 삭제
      operationId: deleteTeeTime
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: 삭제 성공
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'

  # Performance Endpoints
  /performance/complete:
    post:
      tags:
        - Performance
      summary: 티타임 완료 등록
      operationId: completePerformance
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CompletePerformanceRequest'
      responses:
        '201':
          description: 완료 등록 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Performance'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'

  /performance/summary:
    get:
      tags:
        - Performance
      summary: 실적 요약 조회
      operationId: getPerformanceSummary
      parameters:
        - name: startDate
          in: query
          required: true
          schema:
            type: string
            format: date
        - name: endDate
          in: query
          required: true
          schema:
            type: string
            format: date
        - name: managerId
          in: query
          schema:
            type: string
        - name: teamId
          in: query
          schema:
            type: string
        - name: golfCourseId
          in: query
          schema:
            type: string
      responses:
        '200':
          description: 실적 요약
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PerformanceSummaryResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'

  /performance/stats:
    get:
      tags:
        - Performance
      summary: 실적 통계 조회
      operationId: getPerformanceStats
      parameters:
        - name: period
          in: query
          required: true
          schema:
            type: string
            enum: [daily, weekly, monthly, yearly]
        - name: startDate
          in: query
          required: true
          schema:
            type: string
            format: date
        - name: endDate
          in: query
          required: true
          schema:
            type: string
            format: date
        - name: groupBy
          in: query
          schema:
            type: string
            enum: [manager, team, golfCourse, region]
      responses:
        '200':
          description: 실적 통계
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PerformanceStatsResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'

  # Golf Courses Endpoints
  /golf-courses:
    get:
      tags:
        - GolfCourses
      summary: 골프장 목록 조회
      operationId: getGolfCoursesList
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/LimitParam'
        - $ref: '#/components/parameters/SortParam'
        - name: region
          in: query
          schema:
            $ref: '#/components/schemas/Region'
        - name: status
          in: query
          schema:
            $ref: '#/components/schemas/GolfCourseStatus'
      responses:
        '200':
          description: 골프장 목록
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GolfCourseListResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

    post:
      tags:
        - GolfCourses
      summary: 골프장 등록
      operationId: createGolfCourse
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateGolfCourseRequest'
      responses:
        '201':
          description: 골프장 등록 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GolfCourse'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'

  /golf-courses/{id}:
    get:
      tags:
        - GolfCourses
      summary: 골프장 상세 조회
      operationId: getGolfCourseById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 골프장 상세 정보
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GolfCourse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'

    put:
      tags:
        - GolfCourses
      summary: 골프장 수정
      operationId: updateGolfCourse
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateGolfCourseRequest'
      responses:
        '200':
          description: 수정 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GolfCourse'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'

    delete:
      tags:
        - GolfCourses
      summary: 골프장 삭제
      operationId: deleteGolfCourse
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: 삭제 성공
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'

  # Users Endpoints
  /users:
    get:
      tags:
        - Users
      summary: 회원 목록 조회
      operationId: getUsersList
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/LimitParam'
        - $ref: '#/components/parameters/SortParam'
        - name: accountType
          in: query
          schema:
            $ref: '#/components/schemas/AccountType'
        - name: teamId
          in: query
          schema:
            type: string
      responses:
        '200':
          description: 회원 목록
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserListResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'

    post:
      tags:
        - Users
      summary: 회원 등록
      operationId: createUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
      responses:
        '201':
          description: 회원 등록 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '409':
          $ref: '#/components/responses/ConflictError'

  /users/{id}:
    get:
      tags:
        - Users
      summary: 회원 상세 조회
      operationId: getUserById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 회원 상세 정보
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'

    put:
      tags:
        - Users
      summary: 회원 수정
      operationId: updateUser
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRequest'
      responses:
        '200':
          description: 수정 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'

    delete:
      tags:
        - Users
      summary: 회원 삭제
      operationId: deleteUser
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: 삭제 성공
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'

  # Teams Endpoints
  /teams:
    get:
      tags:
        - Teams
      summary: 팀 목록 조회
      operationId: getTeamsList
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/LimitParam'
        - $ref: '#/components/parameters/SortParam'
      responses:
        '200':
          description: 팀 목록
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TeamListResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'

    post:
      tags:
        - Teams
      summary: 팀 생성
      operationId: createTeam
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTeamRequest'
      responses:
        '201':
          description: 팀 생성 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Team'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'

  /teams/{id}:
    get:
      tags:
        - Teams
      summary: 팀 상세 조회
      operationId: getTeamById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 팀 상세 정보
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Team'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'

    put:
      tags:
        - Teams
      summary: 팀 수정
      operationId: updateTeam
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateTeamRequest'
      responses:
        '200':
          description: 수정 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Team'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'

    delete:
      tags:
        - Teams
      summary: 팀 삭제
      operationId: deleteTeam
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: 삭제 성공
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  parameters:
    PageParam:
      name: page
      in: query
      description: 페이지 번호 (1부터 시작)
      schema:
        type: integer
        minimum: 1
        default: 1

    LimitParam:
      name: limit
      in: query
      description: 페이지당 항목 수
      schema:
        type: integer
        minimum: 1
        maximum: 100
        default: 20

    SortParam:
      name: sort
      in: query
      description: 정렬 기준 (field:asc 또는 field:desc)
      schema:
        type: string
        pattern: '^[a-zA-Z]+:(asc|desc)$'

  schemas:
    # Enums
    AccountType:
      type: string
      enum:
        - SUPER_ADMIN
        - ADMIN
        - TEAM_LEADER
        - INTERNAL_MANAGER
        - EXTERNAL_MANAGER
        - PARTNER
        - GOLF_COURSE
        - MEMBER

    Region:
      type: string
      enum:
        - 제주
        - 경기
        - 강원
        - 충청
        - 호남
        - 영남
        - 경상
        - 기타

    TeeTimeStatus:
      type: string
      enum:
        - AVAILABLE
        - RESERVED
        - CONFIRMED
        - COMPLETED
        - CANCELLED

    TeeTimeType:
      type: string
      enum:
        - DAILY
        - PACKAGE

    BookingType:
      type: string
      enum:
        - BOOKING
        - JOIN

    TimeSlot:
      type: string
      enum:
        - 1부
        - 2부
        - 3부

    GolfCourseStatus:
      type: string
      enum:
        - ACTIVE
        - API_INTEGRATION
        - MANUAL
        - INACTIVE

    # Error Response
    ErrorResponse:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: string
          description: 에러 코드
        message:
          type: string
          description: 에러 메시지
        details:
          type: object
          description: 추가 에러 상세 정보

    ValidationError:
      type: object
      required:
        - code
        - message
        - errors
      properties:
        code:
          type: string
          enum: [VALIDATION_ERROR]
        message:
          type: string
        errors:
          type: array
          items:
            type: object
            properties:
              field:
                type: string
              message:
                type: string
              code:
                type: string

    SuccessResponse:
      type: object
      properties:
        success:
          type: boolean
          default: true
        message:
          type: string

    # Auth Schemas
    LoginRequest:
      type: object
      required:
        - phoneNumber
        - password
      properties:
        phoneNumber:
          type: string
          pattern: '^010[0-9]{8}$'
          description: 연락처 (010으로 시작하는 11자리)
        password:
          type: string
          minLength: 6
          description: 비밀번호

    LoginResponse:
      type: object
      properties:
        accessToken:
          type: string
          description: JWT 액세스 토큰
        refreshToken:
          type: string
          description: JWT 리프레시 토큰
        user:
          $ref: '#/components/schemas/User'

    SessionResponse:
      type: object
      properties:
        user:
          $ref: '#/components/schemas/User'
        expires:
          type: string
          format: date-time

    # User Schemas
    User:
      type: object
      properties:
        id:
          type: string
        phoneNumber:
          type: string
        name:
          type: string
        accountType:
          $ref: '#/components/schemas/AccountType'
        teamId:
          type: string
          nullable: true
        team:
          $ref: '#/components/schemas/Team'
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    CreateUserRequest:
      type: object
      required:
        - phoneNumber
        - password
        - name
        - accountType
      properties:
        phoneNumber:
          type: string
          pattern: '^010[0-9]{8}$'
        password:
          type: string
          minLength: 6
        name:
          type: string
        accountType:
          $ref: '#/components/schemas/AccountType'
        teamId:
          type: string

    UpdateUserRequest:
      type: object
      properties:
        name:
          type: string
        password:
          type: string
          minLength: 6
        accountType:
          $ref: '#/components/schemas/AccountType'
        teamId:
          type: string

    UserListResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/User'
        pagination:
          $ref: '#/components/schemas/Pagination'

    # Team Schemas
    Team:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        leaderId:
          type: string
        leader:
          $ref: '#/components/schemas/User'
        members:
          type: array
          items:
            $ref: '#/components/schemas/User'
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    CreateTeamRequest:
      type: object
      required:
        - name
        - leaderId
      properties:
        name:
          type: string
        leaderId:
          type: string

    UpdateTeamRequest:
      type: object
      properties:
        name:
          type: string
        leaderId:
          type: string

    TeamListResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Team'
        pagination:
          $ref: '#/components/schemas/Pagination'

    # Golf Course Schemas
    GolfCourse:
      type: object
      properties:
        id:
          type: string
        order:
          type: integer
        region:
          $ref: '#/components/schemas/Region'
        name:
          type: string
        address:
          type: string
        phoneNumber:
          type: string
        status:
          $ref: '#/components/schemas/GolfCourseStatus'
        notes:
          type: string
          nullable: true
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    CreateGolfCourseRequest:
      type: object
      required:
        - region
        - name
        - address
        - phoneNumber
      properties:
        order:
          type: integer
        region:
          $ref: '#/components/schemas/Region'
        name:
          type: string
        address:
          type: string
        phoneNumber:
          type: string
        status:
          $ref: '#/components/schemas/GolfCourseStatus'
          default: ACTIVE
        notes:
          type: string

    UpdateGolfCourseRequest:
      type: object
      properties:
        order:
          type: integer
        region:
          $ref: '#/components/schemas/Region'
        name:
          type: string
        address:
          type: string
        phoneNumber:
          type: string
        status:
          $ref: '#/components/schemas/GolfCourseStatus'
        notes:
          type: string

    GolfCourseListResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/GolfCourse'
        pagination:
          $ref: '#/components/schemas/Pagination'

    # Tee Time Schemas
    TeeTime:
      type: object
      properties:
        id:
          type: string
        golfCourseId:
          type: string
        golfCourse:
          $ref: '#/components/schemas/GolfCourse'
        date:
          type: string
          format: date
        time:
          type: string
          pattern: '^([01][0-9]|2[0-3]):[0-5][0-9]$'
        timeSlot:
          $ref: '#/components/schemas/TimeSlot'
        greenFee:
          type: number
          format: decimal
          description: 그린피 (만원 단위, 소수점 1자리)
        playerCount:
          type: integer
          minimum: 1
          maximum: 4
        requirements:
          type: string
        holeType:
          type: string
          enum: [18홀, 9홀]
        caddie:
          type: boolean
        advance:
          type: number
          format: decimal
          description: 선입금
        mealIncluded:
          type: boolean
        cartIncluded:
          type: boolean
        teeTimeType:
          $ref: '#/components/schemas/TeeTimeType'
        bookingType:
          $ref: '#/components/schemas/BookingType'
        status:
          $ref: '#/components/schemas/TeeTimeStatus'
        reservedAt:
          type: string
          format: date-time
          nullable: true
        managerId:
          type: string
          nullable: true
        manager:
          $ref: '#/components/schemas/User'
        confirmedAt:
          type: string
          format: date-time
          nullable: true
        confirmedBy:
          type: string
          nullable: true
        connectedTeeTimeId:
          type: string
          nullable: true
          description: 연결된 티타임 ID (패키지용)
        accommodationInfo:
          type: string
          nullable: true
          description: 숙박 정보 (패키지용)
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    CreateTeeTimeRequest:
      type: object
      required:
        - golfCourseId
        - date
        - time
        - greenFee
        - playerCount
        - requirements
        - holeType
        - caddie
        - advance
        - mealIncluded
        - cartIncluded
      properties:
        golfCourseId:
          type: string
        date:
          type: string
          format: date
        time:
          type: string
          pattern: '^([01][0-9]|2[0-3]):[0-5][0-9]$'
        greenFee:
          type: number
          format: decimal
        playerCount:
          type: integer
          minimum: 1
          maximum: 4
        requirements:
          type: string
        holeType:
          type: string
          enum: [18홀, 9홀]
        caddie:
          type: boolean
        advance:
          type: number
          format: decimal
        mealIncluded:
          type: boolean
        cartIncluded:
          type: boolean
        teeTimeType:
          $ref: '#/components/schemas/TeeTimeType'
          default: DAILY
        connectedTeeTimeId:
          type: string
        accommodationInfo:
          type: string

    UpdateTeeTimeRequest:
      type: object
      properties:
        date:
          type: string
          format: date
        time:
          type: string
          pattern: '^([01][0-9]|2[0-3]):[0-5][0-9]$'
        greenFee:
          type: number
          format: decimal
        playerCount:
          type: integer
          minimum: 1
          maximum: 4
        requirements:
          type: string
        holeType:
          type: string
          enum: [18홀, 9홀]
        caddie:
          type: boolean
        advance:
          type: number
          format: decimal
        mealIncluded:
          type: boolean
        cartIncluded:
          type: boolean
        connectedTeeTimeId:
          type: string
        accommodationInfo:
          type: string

    TeeTimeListResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/TeeTime'
        pagination:
          $ref: '#/components/schemas/Pagination'

    ReserveTeeTimeRequest:
      type: object
      required:
        - teeTimeId
      properties:
        teeTimeId:
          type: string

    ReserveTeeTimeResponse:
      type: object
      properties:
        teeTime:
          $ref: '#/components/schemas/TeeTime'
        expiresAt:
          type: string
          format: date-time
          description: 예약 만료 시간 (10분 후)

    ConfirmTeeTimeRequest:
      type: object
      required:
        - teeTimeId
      properties:
        teeTimeId:
          type: string
        notes:
          type: string
          description: 확정 메모

    CancelTeeTimeRequest:
      type: object
      required:
        - teeTimeId
      properties:
        teeTimeId:
          type: string
        reason:
          type: string
          description: 취소 사유

    TimerStatusResponse:
      type: object
      properties:
        teeTimeId:
          type: string
        status:
          $ref: '#/components/schemas/TeeTimeStatus'
        reservedAt:
          type: string
          format: date-time
        expiresAt:
          type: string
          format: date-time
        remainingSeconds:
          type: integer
          description: 남은 시간 (초)
        isExpired:
          type: boolean

    # Matrix View Schemas
    MatrixViewResponse:
      type: object
      properties:
        matrixData:
          type: array
          items:
            $ref: '#/components/schemas/RegionMatrix'
        dateColumns:
          type: array
          items:
            $ref: '#/components/schemas/DateColumn'
        summary:
          $ref: '#/components/schemas/MatrixSummary'

    RegionMatrix:
      type: object
      properties:
        region:
          $ref: '#/components/schemas/Region'
        golfCourses:
          type: array
          items:
            $ref: '#/components/schemas/GolfCourseMatrix'

    GolfCourseMatrix:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        dates:
          type: array
          items:
            $ref: '#/components/schemas/DateMatrix'

    DateMatrix:
      type: object
      properties:
        date:
          type: string
          format: date
        timeSlot1:
          type: integer
          description: 1부 티타임 수
        timeSlot2:
          type: integer
          description: 2부 티타임 수
        timeSlot3:
          type: integer
          description: 3부 티타임 수
        total:
          type: integer
          description: 전체 티타임 수

    DateColumn:
      type: object
      properties:
        date:
          type: string
          format: date
        displayDate:
          type: string
          description: 표시용 날짜 (MM/DD)
        dayOfWeek:
          type: string
          description: 요일
        isToday:
          type: boolean
        isWeekend:
          type: boolean

    MatrixSummary:
      type: object
      properties:
        totalGolfCourses:
          type: integer
        totalTeeTimes:
          type: integer
        teeTimeType:
          $ref: '#/components/schemas/TeeTimeType'
        bookingType:
          $ref: '#/components/schemas/BookingType'
        dateRange:
          type: object
          properties:
            start:
              type: string
              format: date
            end:
              type: string
              format: date

    # Performance Schemas
    Performance:
      type: object
      properties:
        id:
          type: string
        teeTimeId:
          type: string
        teeTime:
          $ref: '#/components/schemas/TeeTime'
        completedAt:
          type: string
          format: date-time
        actualPlayerCount:
          type: integer
        actualGreenFee:
          type: number
          format: decimal
        revenue:
          type: number
          format: decimal
        notes:
          type: string
        registeredBy:
          type: string
        registeredByUser:
          $ref: '#/components/schemas/User'
        createdAt:
          type: string
          format: date-time

    CompletePerformanceRequest:
      type: object
      required:
        - teeTimeId
        - actualPlayerCount
        - actualGreenFee
      properties:
        teeTimeId:
          type: string
        actualPlayerCount:
          type: integer
          minimum: 1
          maximum: 4
        actualGreenFee:
          type: number
          format: decimal
        notes:
          type: string

    PerformanceSummaryResponse:
      type: object
      properties:
        totalRevenue:
          type: number
          format: decimal
        totalCount:
          type: integer
        averageGreenFee:
          type: number
          format: decimal
        performances:
          type: array
          items:
            $ref: '#/components/schemas/Performance'

    PerformanceStatsResponse:
      type: object
      properties:
        period:
          type: string
        stats:
          type: array
          items:
            type: object
            properties:
              label:
                type: string
              revenue:
                type: number
                format: decimal
              count:
                type: integer
              averageGreenFee:
                type: number
                format: decimal

    # Common Schemas
    Pagination:
      type: object
      properties:
        page:
          type: integer
        limit:
          type: integer
        total:
          type: integer
        totalPages:
          type: integer

  responses:
    BadRequestError:
      description: 잘못된 요청
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ValidationError'

    UnauthorizedError:
      description: 인증 실패
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            code: UNAUTHORIZED
            message: 인증이 필요합니다

    ForbiddenError:
      description: 권한 부족
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            code: FORBIDDEN
            message: 해당 작업을 수행할 권한이 없습니다

    NotFoundError:
      description: 리소스를 찾을 수 없음
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            code: NOT_FOUND
            message: 요청한 리소스를 찾을 수 없습니다

    ConflictError:
      description: 충돌 발생
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            code: CONFLICT
            message: 리소스 충돌이 발생했습니다

    InternalServerError:
      description: 서버 내부 오류
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            code: INTERNAL_SERVER_ERROR
            message: 서버 내부 오류가 발생했습니다